//implement each
var each = function(collection, action) {
  if (Array.isArray(collection)) {
    for (var i = 0; i < collection.length; i++) {
      action(collection[i], i, collection);
    }
  } else {
    for (var key in collection) {
      action(collection[key], key, collection);
    }
  }
};

//implement map
var map = function (collection, iterator) {
  var result = [];
  each(array, function(element, index, array) {
    arr.push(iterator(element, index, array))
  });
return result; //array
}


//use map to produce each element divided by five
var mapNumbers = [5, 10, 15, 20, 25, 30, 35, 40];
var mappedNumbers = map(mappedNumber, function(element, index, array) {
  return element/5;
});


//implement the function filter
var filter = function(collection, test) {
  var result = [];
  each(collection, function(e, i, a) {
    if(test(e, i, a)) { //conditional returns true or false
      result.push(e); //push in true values
    }
  })
  return result;
}


//set filteredNumbers to the result of filtering the array filterNumbers to produce only odd numbers
var filteredNumbers = [1, 2, 3, 4, 5,6, 2, 6, 7];
var filteredNumbers = filter(filterNumbers, function(number, i, a) {
  return number % 2 === 1;
})

//implement reduce
function reduce(array, action, seed) {
  array.forEach(function(value, index, array) {
    if(seed === undefined && index === 0) {
      seed = array[0];
    } else {
      seed = action(seed, value, index)
    }
  });
  return seed;
}

//use reduce 
var arr = [1, 2, 3, 4, 5];
var arrSum = reduce(arr, function(previousResult, value, index) {
  return previousResult / value;
}, (1));
console.log(arrSum);

//use reduce to condense array
var cookies = [['sugar', 'chocolate chip'], ['big', 'small'], ['sugar free', 'loads o sugar']].reduce(function(yum, yummy) {
  return yum.concat(yummy);
}, []);
//'cookies to buy: '
console.log(cookies);
delete(cookies[1]);
console.log(cookies);